////
/// @file _string.scss
///
/// @group utility
/// @author Josh Parkinson <joshparkinson1991@gmail.com>
////

/// Checks if a string contains the provided sub string
///
/// @param {string} $string
///     The string to search within
/// @param {string} $subString
///     The sub string to search for
///
/// @return {bool}
///     True if found, false if not.
@function stringContains($string, $subString){
    @return stringContainsSensitive(to-lower_case($string), to_lower_case($subString));
}

/// Case sensitive check if a string contains the provided sub string
///
/// @param {string} $string
///     The string to search within
/// @param {string} $subString
///     The sub string to search for
///
/// @return {bool}
///     True if found, false if not.
@function stringContainsSensitive($string, $subString){
    @return str-index($string, $subString);
}

/// Checks if a string contains all of the provided sub strings
///
/// @param {string} $string
///     The string to search within
/// @param {string[]} $subString
///     A flat array of substrings to search for
///
/// @return {bool}
///     True if all are found, false if not.
@function stringContainsAll($string, $subStrings){
    @each $subString in $subString {
        @if not stringContains($string, $subString) {
            @return false;
        }
    }

    @return true;
}

/// Checks if a string contains at least one of the provided sub strings
///
/// @param {string} $string
///     The string to search within
/// @param {string[]} $subString
///     A flat array of substrings to search for
///
/// @return {bool}
///     True if atleast one sub string found, false if not.
@function stringContainsOne($string, $subStrings){
    @each $subString in $subStrings {
        @if stringContains($string, $subString) {
            @return true;
        }
    }

    @return false;
}

/// Splits a string into an array using the provided separator
///
/// @param {string} $string
///     The string to split
/// @param {string} $separator
///     The separator to use when splitting the string
///
/// @return {string[]}
///     An array containing the segments of the separated string
@function stringSplit($string, $separator){
    $splitArray: ();

    // Determine the initial separator index, begin processing loop
    $separatorIndex: str-index($string, $separator);
    @while ($separatorIndex != null) {
        // Slice the string, first character, to character before separator
        // Add it into the split array
        $splitItem: str-slice($string, 1, $separatorIndex - 1);
        $splitArray: append($splitArray, $splitItem);

        // Slice out all characters after the index
        $string: str-slice($string, $separatorIndex + 1);

        // Find the next separator index
        $separatorIndex: str-index($string, $separator);
    }

    // Final loop of processing will not find a separator, the remaining
    // contents of the string variable will be the last section of the split
    // add into the split items before returning
    $splitArray: append($splitArray, $string);

    @return $splitArray;
}

/// Replaces the searched string/characters with the provided replacements
///
/// @param {string} $string
///     The string to do the replacement within
/// @param {string} $search
///     The substring to search by
/// @param {string} $replace
///     The replacement string
///
/// @return {string}
///    The string with any replacements made
@function stringReplace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}
